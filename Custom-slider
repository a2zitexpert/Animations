$(document).ready(function () {
if ($(".slider").length && $(".slide").length) {
const slides = $(".slide"); // Slides (each should be 100vh)
const slider = $(".slider"); // Parent slider
let currentIndex = 0; // Track current slide index
let isScrolling = false; // Prevent multiple scrolls
let touchStartY = 0; // Start Y position for touch
let touchEndY = 0; // End Y position for touch

// Dynamically create the dots container inside the slider if it doesn't exist
let dotsContainer = slider.find(".dots-container");
if (dotsContainer.length === 0) {
  dotsContainer = $('<div class="dots-container"></div>');
  slider.append(dotsContainer); // Append the dots container to the slider
}

// Generate dots based on the number of slides
slides.each(function (index) {
  const dot = $('<div class="dot"></div>');
  dot.attr("data-index", index);
  dotsContainer.append(dot);
});

// Function to update active dot
function updateDots() {
  $(".dot").removeClass("active");
  $(`.dot[data-index="${currentIndex}"]`).addClass("active");
}

// Function to scroll to a specific slide
function scrollToSlide(index) {
  if (isScrolling) return; // Prevent multiple scrolls

  isScrolling = true; // Lock scroll
  const offsetTop = $(slides[index]).offset().top;

  $("html, body").stop().animate(
    {
      scrollTop: offsetTop,
    },
    600, // Scroll duration
    () => {
      isScrolling = false; // Unlock scroll after animation
    }
  );
  currentIndex = index; // Update current index
  updateDots(); // Update dots
}

// Add click functionality to dots
$(document).on("click", ".dot", function () {
  const index = $(this).data("index");
  scrollToSlide(index);
});

// Handle touchstart and touchmove for swipe gestures
slider.on("touchstart", function (e) {
  touchStartY = e.originalEvent.touches[0].clientY;
});

slider.on("touchmove", function (e) {
  touchEndY = e.originalEvent.touches[0].clientY;
});

slider.on("touchend", function () {
  if (isScrolling) return; // Prevent multiple animations
  const touchDeltaY = touchStartY - touchEndY;

  if (Math.abs(touchDeltaY) > 50) {
    // Only trigger for significant swipes
    if (touchDeltaY > 0 && currentIndex < slides.length - 1) {
      // Swipe up
      scrollToSlide(currentIndex + 1);
    } else if (touchDeltaY < 0 && currentIndex > 0) {
      // Swipe down
      scrollToSlide(currentIndex - 1);
    }
  }
});

// Handle wheel events for desktop
$(window).on("wheel", function (e) {
  if (isScrolling) return; // Prevent multiple animations

  // Allow normal scrolling when at the first or last slide
  if (currentIndex === 0 && e.originalEvent.deltaY < 0) return; // Scrolling up from the first slide
  if (currentIndex === slides.length - 1 && e.originalEvent.deltaY > 0) return; // Scrolling down from the last slide

  if (dotsContainer.css("visibility") === "hidden") return; // Only activate in slider view

  const scrollThreshold = 10; // Set a smaller threshold for touchpad scrolls
  if (Math.abs(e.originalEvent.deltaY) > scrollThreshold) { // Scroll threshold adjusted
    if (e.originalEvent.deltaY > 0) {
      // Scroll down
      if (currentIndex < slides.length - 1) {
        scrollToSlide(currentIndex + 1);
      }
    } else {
      // Scroll up
      if (currentIndex > 0) {
        scrollToSlide(currentIndex - 1);
      }
    }
  }

  e.preventDefault(); // Prevent normal scroll behavior within the slider
});

// Allow normal scrolling on slider edges
$(window).on("scroll", function () {
  const scrollTop = $(window).scrollTop();
  const sliderTop = slider.offset().top;
  const sliderBottom = sliderTop + slider.outerHeight();

  if (scrollTop < sliderTop || scrollTop > sliderBottom) {
    isScrolling = false; // Unlock scrolling when outside the slider
  }
});

// Initialize dots on page load
$(window).on("load", function () {
  const scrollTop = $(window).scrollTop();
  slides.each(function (index) {
    const offsetTop = $(this).offset().top;
    if (scrollTop >= offsetTop && scrollTop < offsetTop + $(this).outerHeight()) {
      currentIndex = index;
    }
  });
  updateDots();
});

// GSAP ScrollTrigger for dots visibility
gsap.registerPlugin(ScrollTrigger);

ScrollTrigger.create({
  trigger: ".slider", // Target the slider section
  start: "top -1%", // When the slider's top is at -1% of the viewport
  end: "bottom bottom", // When the slider's bottom leaves the viewport
  onEnter: () => {
    gsap.to(dotsContainer, {
      opacity: 1,
      visibility: "visible",
      duration: 0.3,
    });
  },
  onLeave: () => {
    gsap.to(dotsContainer, {
      opacity: 0,
      visibility: "hidden",
      duration: 0.3,
    });
  },
  onEnterBack: () => {
    gsap.to(dotsContainer, {
      opacity: 1,
      visibility: "visible",
      duration: 0.3,
    });
  },
  onLeaveBack: () => {
    gsap.to(dotsContainer, {
      opacity: 0,
      visibility: "hidden",
      duration: 0.3,
    });
  },
});

// Initialize the first dot as active
updateDots();
}


});
